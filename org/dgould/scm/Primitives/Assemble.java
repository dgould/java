/* Assemble.java1234567890123456789012345678901234567890123456789012345678901234567890123456789*/package org.dgould.scm.prim;import org.dgould.scm.*;//argument is the name of a JasmIn file. pAssemble invokes JAsmIn to//assemble the file, then loads the new class and returns it as a//Scheme PROCEDUREpublic class Assemble extends Primitive{	public Assemble() {parameters = null;}		public SchemeObject Invoke(SchemeObject args, SchemeEnvironment env)	{		SchemeObject jasminFile = interpreter.Eval(args.Car(), env);		if(!jasminFile.isString())		{			return new SchemeObject(SchemeObject.ERROR,				(Object)"Wrong argument type");		}		String[] argv = new String[3];		argv[0] = "-d";		argv[1] = "SchemeApplet";		argv[2] = (String)jasminFile.mContents;		String primName = argv[2].substring(0, argv[2].indexOf('.'));				try		{			jasmin.Main.main(argv);			System.out.println("created class" + primName);			Class newPrimClass = Class.forName("jscm." + primName);			System.out.println("loaded class" + primName);			Primitive newPrimObject = (Primitive)newPrimClass.newInstance();			System.out.println("instantiated class" + primName);			return new SchemeObject(SchemeObject.PROCEDURE, (Object)newPrimObject);		}		catch(Exception e)		{			String message = "Error creating primitive for " + primName;			if(e instanceof ClassNotFoundException)			{				System.out.println("error creating class" + primName);				message = "JasmIn failed to create new class for " + primName;			}			if(e instanceof InstantiationException)			{				System.out.println("error instantiating class" + primName);				message = "Error instantiating new class for " + primName;			}			if(e instanceof IllegalAccessException)			{				System.out.println("error accessing class" + primName);				message = "Error accessing new class for " + primName;			}			return new SchemeObject(SchemeObject.ERROR,				(Object)message);		}	}}