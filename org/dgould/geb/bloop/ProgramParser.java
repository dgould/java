
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Sat Nov 24 15:48:12 PST 2001
//----------------------------------------------------

package org.dgould.geb.bloop;

import java_cup.runtime.*;
import org.dgould.geb.bloop.ast.*;
import org.dgould.*;

public class ProgramParser extends java_cup.runtime.lr_parser {

  /** constructor */
  public ProgramParser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 2},     {1, 2},     {1, 2},     {1, 2}, 
        {3, 3},     {3, 1},     {4, 0},     {4, 1},     {5, 3}, 
        {5, 1},     {6, 0},     {6, 1},     {7, 2},     {7, 1}, 
        {9, 1},     {9, 1},     {9, 1},     {9, 1},     {9, 1}, 
        {9, 1},     {9, 1},     {9, 3},     {10, 4},     {11, 4}, 
        {12, 2},     {12, 3},     {12, 3},     {12, 3},     {12, 3}, 
        {12, 3},     {12, 3},     {12, 3},     {12, 3},     {12, 3}, 
        {2, 11},     {8, 9},     {13, 1},     {13, 1},     {13, 1}, 
        {13, 1},     {13, 1},     {13, 1},     {14, 2},     {15, 7}, 
        {15, 5},     {16, 6},     {17, 4},     {17, 7},     {18, 4}, 
        {19, 4}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{6,4,42,5,-1,0},
    /*1*/{0,121,-1,0},
    /*2*/{2,119,6,4,42,5,-1,0},
    /*3*/{10,72,-1,0},
    /*4*/{43,8,-1,0},
    /*5*/{2,7,-1,0},
    /*6*/{0,-5,-1,0},
    /*7*/{9,9,-1,0},
    /*8*/{6,10,-1,0},
    /*9*/{9,11,-1,0},
    /*10*/{10,12,-1,0},
    /*11*/{6,13,11,-12,-1,0},
    /*12*/{11,-11,18,116,-1,0},
    /*13*/{11,16,-1,0},
    /*14*/{11,-13,-1,0},
    /*15*/{16,17,-1,0},
    /*16*/{31,19,-1,0},
    /*17*/{19,115,-1,0},
    /*18*/{3,20,-1,0},
    /*19*/{16,21,-1,0},
    /*20*/{32,22,-1,0},
    /*21*/{7,37,8,25,31,19,34,28,35,29,39,24,40,32,-1,0},
    /*22*/{7,-40,8,-40,31,-40,34,-40,35,-40,39,-40,40,-40,-1,0},
    /*23*/{35,112,-1,0},
    /*24*/{21,109,-1,0},
    /*25*/{7,-43,8,-43,31,-43,34,-43,35,-43,39,-43,40,-43,-1,0},
    /*26*/{17,108,-1,0},
    /*27*/{31,105,-1,0},
    /*28*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,36,96,-1,0},
    /*29*/{7,-41,8,-41,31,-41,34,-41,35,-41,39,-41,40,-41,-1,0},
    /*30*/{7,37,8,25,31,90,34,28,35,29,39,24,40,32,-1,0},
    /*31*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*32*/{7,-38,8,-38,31,-38,34,-38,35,-38,39,-38,40,-38,-1,0},
    /*33*/{7,-42,8,-42,31,-42,34,-42,35,-42,39,-42,40,-42,-1,0},
    /*34*/{7,-15,8,-15,31,-15,34,-15,35,-15,39,-15,40,-15,-1,0},
    /*35*/{7,-39,8,-39,31,-39,34,-39,35,-39,39,-39,40,-39,-1,0},
    /*36*/{12,38,-1,0},
    /*37*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*38*/{11,-16,13,-16,15,-16,17,-16,18,-16,22,-16,23,-16,24,-16,25,-16,26,-16,27,-16,28,-16,29,-16,30,-16,38,-16,-1,0},
    /*39*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*40*/{11,-21,13,-21,15,-21,17,-21,18,-21,22,-21,23,-21,24,-21,25,-21,26,-21,27,-21,28,-21,29,-21,30,-21,38,-21,-1,0},
    /*41*/{11,-18,13,-18,15,-18,17,-18,18,-18,22,-18,23,-18,24,-18,25,-18,26,-18,27,-18,28,-18,29,-18,30,-18,38,-18,-1,0},
    /*42*/{11,-22,13,-22,15,-22,17,-22,18,-22,22,-22,23,-22,24,-22,25,-22,26,-22,27,-22,28,-22,29,-22,30,-22,38,-22,-1,0},
    /*43*/{11,-20,13,-20,15,-20,17,-20,18,-20,22,-20,23,-20,24,-20,25,-20,26,-20,27,-20,28,-20,29,-20,30,-20,38,-20,-1,0},
    /*44*/{13,79,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*45*/{11,-17,13,-17,15,-17,17,-17,18,-17,22,-17,23,-17,24,-17,25,-17,26,-17,27,-17,28,-17,29,-17,30,-17,38,-17,-1,0},
    /*46*/{10,72,11,-19,13,-19,15,-19,17,-19,18,-19,22,-19,23,-19,24,-19,25,-19,26,-19,27,-19,28,-19,29,-19,30,-19,38,-19,-1,0},
    /*47*/{12,69,-1,0},
    /*48*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*49*/{11,-26,13,-26,15,-26,17,-26,18,-26,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,38,-26,-1,0},
    /*50*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*51*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*52*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*53*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*54*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*55*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*56*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*57*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*58*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*59*/{11,-28,13,-28,15,-28,17,-28,18,-28,22,-28,23,-28,24,57,25,56,26,54,27,58,28,53,29,55,30,52,38,-28,-1,0},
    /*60*/{11,-32,13,-32,15,-32,17,-32,18,-32,22,-32,23,-32,24,-32,25,-32,26,-32,27,-32,28,-32,29,-32,30,-32,38,-32,-1,0},
    /*61*/{11,-29,13,-29,15,-29,17,-29,18,-29,22,-29,23,-29,24,-29,25,56,26,54,27,58,28,53,29,55,30,52,38,-29,-1,0},
    /*62*/{11,-30,13,-30,15,-30,17,-30,18,-30,22,-30,23,-30,24,-30,25,-30,26,54,27,58,28,53,29,55,30,52,38,-30,-1,0},
    /*63*/{11,-34,13,-34,15,-34,17,-34,18,-34,22,-34,23,-34,24,-34,25,-34,26,54,27,58,28,-34,29,-34,30,-34,38,-34,-1,0},
    /*64*/{11,-31,13,-31,15,-31,17,-31,18,-31,22,-31,23,-31,24,-31,25,-31,26,-31,27,-31,28,-31,29,-31,30,-31,38,-31,-1,0},
    /*65*/{11,-33,13,-33,15,-33,17,-33,18,-33,22,-33,23,-33,24,-33,25,-33,26,54,27,58,28,-33,29,-33,30,-33,38,-33,-1,0},
    /*66*/{11,-35,13,-35,15,-35,17,-35,18,-35,22,-35,23,-35,24,-35,25,-35,26,54,27,58,28,-35,29,-35,30,-35,38,-35,-1,0},
    /*67*/{11,-27,13,-27,15,-27,17,-27,18,-27,22,-27,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,38,-27,-1,0},
    /*68*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*69*/{13,71,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*70*/{11,-24,13,-24,15,-24,17,-24,18,-24,22,-24,23,-24,24,-24,25,-24,26,-24,27,-24,28,-24,29,-24,30,-24,38,-24,-1,0},
    /*71*/{3,39,4,46,5,42,6,47,7,48,11,-8,14,40,20,49,-1,0},
    /*72*/{11,-9,-1,0},
    /*73*/{11,-7,18,77,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*74*/{11,76,-1,0},
    /*75*/{0,-25,2,-25,11,-25,13,-25,15,-25,17,-25,18,-25,22,-25,23,-25,24,-25,25,-25,26,-25,27,-25,28,-25,29,-25,30,-25,38,-25,-1,0},
    /*76*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*77*/{11,-6,-1,0},
    /*78*/{21,80,-1,0},
    /*79*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*80*/{17,82,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*81*/{7,-49,8,-49,31,-49,34,-49,35,-49,39,-49,40,-49,-1,0},
    /*82*/{15,84,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*83*/{11,-23,13,-23,15,-23,17,-23,18,-23,22,-23,23,-23,24,-23,25,-23,26,-23,27,-23,28,-23,29,-23,30,-23,38,-23,-1,0},
    /*84*/{18,86,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*85*/{41,87,-1,0},
    /*86*/{16,88,-1,0},
    /*87*/{7,37,8,25,31,19,34,28,35,29,39,24,40,32,-1,0},
    /*88*/{7,-47,8,-47,31,-47,34,-47,35,-47,39,-47,40,-47,-1,0},
    /*89*/{3,92,-1,0},
    /*90*/{7,-14,8,-14,31,-14,34,-14,35,-14,39,-14,40,-14,-1,0},
    /*91*/{16,93,-1,0},
    /*92*/{32,22,33,94,-1,0},
    /*93*/{17,-37,19,-37,-1,0},
    /*94*/{22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,38,102,-1,0},
    /*95*/{37,97,-1,0},
    /*96*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*97*/{22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,38,99,-1,0},
    /*98*/{16,100,-1,0},
    /*99*/{31,19,-1,0},
    /*100*/{7,-45,8,-45,31,-45,34,-45,35,-45,39,-45,40,-45,-1,0},
    /*101*/{16,103,-1,0},
    /*102*/{31,19,-1,0},
    /*103*/{7,-46,8,-46,31,-46,34,-46,35,-46,39,-46,40,-46,-1,0},
    /*104*/{3,106,-1,0},
    /*105*/{17,107,-1,0},
    /*106*/{7,-50,8,-50,31,-50,34,-50,35,-50,39,-50,40,-50,-1,0},
    /*107*/{7,-44,8,-44,31,-44,34,-44,35,-44,39,-44,40,-44,-1,0},
    /*108*/{3,39,4,46,5,42,6,47,7,48,14,40,20,49,-1,0},
    /*109*/{17,111,22,51,23,59,24,57,25,56,26,54,27,58,28,53,29,55,30,52,-1,0},
    /*110*/{7,-48,8,-48,31,-48,34,-48,35,-48,39,-48,40,-48,-1,0},
    /*111*/{3,113,-1,0},
    /*112*/{17,114,-1,0},
    /*113*/{7,-51,8,-51,31,-51,34,-51,35,-51,39,-51,40,-51,-1,0},
    /*114*/{2,-36,6,-36,42,-36,-1,0},
    /*115*/{6,13,-1,0},
    /*116*/{11,-10,-1,0},
    /*117*/{0,-2,-1,0},
    /*118*/{0,-4,-1,0},
    /*119*/{0,-3,2,7,-1,0},
    /*120*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,1,2,2,11,5,-1,-1},
    /*1*/{-1,-1},
    /*2*/{1,117,2,2,11,119,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{5,14,6,13,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{8,17,-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{7,30,8,26,13,34,14,32,15,35,16,22,17,29,18,33,19,25,-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{9,94,10,43,11,40,12,42,-1,-1},
    /*29*/{-1,-1},
    /*30*/{8,26,13,90,14,32,15,35,16,22,17,29,18,33,19,25,-1,-1},
    /*31*/{9,84,10,43,11,40,12,42,-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{9,44,10,43,11,40,12,42,-1,-1},
    /*38*/{-1,-1},
    /*39*/{9,82,10,43,11,40,12,42,-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{9,49,10,43,11,40,12,42,-1,-1},
    /*49*/{-1,-1},
    /*50*/{9,67,10,43,11,40,12,42,-1,-1},
    /*51*/{9,66,10,43,11,40,12,42,-1,-1},
    /*52*/{9,65,10,43,11,40,12,42,-1,-1},
    /*53*/{9,64,10,43,11,40,12,42,-1,-1},
    /*54*/{9,63,10,43,11,40,12,42,-1,-1},
    /*55*/{9,62,10,43,11,40,12,42,-1,-1},
    /*56*/{9,61,10,43,11,40,12,42,-1,-1},
    /*57*/{9,60,10,43,11,40,12,42,-1,-1},
    /*58*/{9,59,10,43,11,40,12,42,-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{9,69,10,43,11,40,12,42,-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{3,72,4,74,9,73,10,43,11,40,12,42,-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{3,77,9,73,10,43,11,40,12,42,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{9,80,10,43,11,40,12,42,-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{8,26,13,88,14,32,15,35,16,22,17,29,18,33,19,25,-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{9,97,10,43,11,40,12,42,-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{8,26,14,100,-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{8,26,14,103,-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{9,109,10,43,11,40,12,42,-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{5,116,-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions_Program action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions_Program();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
 

if (yylex == null) 
  System.err.println("WARNING: yylex must be initialized!");


    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return yylex.yylex(); 
    }



  private Yylex yylex;

  void assignLex(Yylex yylex) {
    this.yylex = yylex;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions_Program {

  /** Constructor */
  CUP$actions_Program() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // abortStatement ::= ABORT LOOP CONSTANT SEMICOLON 
            {
              AbortLoopStatement RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{abortStatement ::= ABORT LOOP CONSTANT SEMICOLON}");}
				RESULT = new AbortLoopStatement(num.numberValue);
			
              CUP$result = new java_cup.runtime.Symbol(19/*abortStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // quitStatement ::= QUIT BLOCK CONSTANT SEMICOLON 
            {
              QuitBlockStatement RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{quitStatement ::= QUIT BLOCK CONSTANT SEMICOLON}");}
				RESULT = new QuitBlockStatement(num.numberValue);
			
              CUP$result = new java_cup.runtime.Symbol(18/*quitStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignStatement ::= CELL LPAREN expression RPAREN ASSIGN expression SEMICOLON 
            {
              AssignmentStatement RESULT = null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{assignStatement ::= CELL LPAREN expression RPAREN ASSIGN expression SEMICOLON}");}
				RESULT = new AssignmentStatement(index, value);
			
              CUP$result = new java_cup.runtime.Symbol(17/*assignStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignStatement ::= OUTPUT ASSIGN expression SEMICOLON 
            {
              AssignmentStatement RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{assignStatement ::= OUTPUT ASSIGN expression SEMICOLON}");}
				RESULT = new AssignmentStatement(null, value);
			
              CUP$result = new java_cup.runtime.Symbol(17/*assignStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifStatement ::= IF expression COMMA THEN COLON statement 
            {
              IfStatement RESULT = null;
		int testleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		Expression test = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{ifStatement ::= IF expression:test COMMA THEN COLON atement:then}");}
				RESULT = new IfStatement(test, then);
			
              CUP$result = new java_cup.runtime.Symbol(16/*ifStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // loopStatement ::= LOOP expression TIMES COLON blockStatement 
            {
              LoopStatement RESULT = null;
		int limitleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		Expression limit = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		BlockStatement body = (BlockStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{loopStatement ::= LOOP expression TIMES COLON blockStatement}");}
				RESULT = new LoopStatement(limit, body, false);
			
              CUP$result = new java_cup.runtime.Symbol(15/*loopStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // loopStatement ::= LOOP AT MOST expression TIMES COLON blockStatement 
            {
              LoopStatement RESULT = null;
		int limitleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		Expression limit = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		BlockStatement body = (BlockStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{loopStatement ::= LOOP AT MOST expression TIMES COLON blockStatement}");}
				RESULT = new LoopStatement(limit, body, true);
			
              CUP$result = new java_cup.runtime.Symbol(15/*loopStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // blockStatement ::= codeBlock SEMICOLON 
            {
              BlockStatement RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{blockStatement ::= codeBlock SEMICOLON}");}
				RESULT = new BlockStatement(b);
			
              CUP$result = new java_cup.runtime.Symbol(14/*blockStatement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= abortStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		AbortLoopStatement stmt = (AbortLoopStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= abortStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= quitStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		QuitBlockStatement stmt = (QuitBlockStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= quitStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= assignStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		AssignmentStatement stmt = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= assignStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= ifStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		IfStatement stmt = (IfStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= ifStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= loopStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		LoopStatement stmt = (LoopStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= loopStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= blockStatement 
            {
              Statement RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		BlockStatement stmt = (BlockStatement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statement ::= blockStatement}");}
				RESULT = (Statement)stmt;
			
              CUP$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codeBlock ::= BLOCK CONSTANT COLON BEGIN statementList BLOCK CONSTANT COLON END 
            {
              Block RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		TokenValue num1 = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		StatementList body = (StatementList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		TokenValue num2 = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{codeBlock ::= BLOCK CONSTANT COLON BEGIN statementList BLOCK CONSTANT COLON END}");}
				if(NaturalNumber.Compare(num1.numberValue, num2.numberValue) != 0)
				{
					//handle error?
					RESULT = null;
				}
				RESULT = new Block(num1.numberValue, body);
			
              CUP$result = new java_cup.runtime.Symbol(8/*codeBlock*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedureDef ::= DEFINE PROCEDURE QUOTE IDENTIFIER QUOTE LBRACKET identifierList RBRACKET COLON codeBlock PERIOD 
            {
              ProcedureDefinition RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fargsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int fargsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		IdentifierList fargs = (IdentifierList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{procedureDef ::= DEFINE PROCEDURE QUOTE IDENTIFIER QUOTE LBRACKET identifierList RBRACKET COLON codeBlock PERIOD}");}
				RESULT = new ProcedureDefinition(name.identifierValue, fargs, new BlockStatement(body));
			
              CUP$result = new java_cup.runtime.Symbol(2/*procedureDef*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-10)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operatorExp ::= expression REMAINDER expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression REMAINDER expression}");}
				RESULT = (OperatorExpression)new RemainderExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operatorExp ::= expression QUOTIENT expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression QUOTIENT expression}");}
				RESULT = (OperatorExpression)new QuotientExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operatorExp ::= expression MULTIPLY expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression MULTIPLY expression}");}
				RESULT = (OperatorExpression)new MultiplyExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operatorExp ::= expression SUBTRACT expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression SUBTRACT expression}");}
				RESULT = (OperatorExpression)new SubtractExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operatorExp ::= expression ADD expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression ADD expression}");}
				RESULT = (OperatorExpression)new AddExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operatorExp ::= expression LESSTHAN expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression LESSTHAN expression}");}
				RESULT = (OperatorExpression)new LessThanExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operatorExp ::= expression EQUALS expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression EQUALS expression}");}
				RESULT = (OperatorExpression)new EqualsExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operatorExp ::= expression OR expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression OR expression}");}
				RESULT = (OperatorExpression)new OrExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operatorExp ::= expression AND expression 
            {
              OperatorExpression RESULT = null;
		int leftArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression leftArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rightArgleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightArgright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression rightArg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= expression AND expression}");}
				RESULT = (OperatorExpression)new AndExpression(leftArg, rightArg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operatorExp ::= NOT expression 
            {
              OperatorExpression RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{operatorExp ::= NOT expression}");}
				RESULT = (OperatorExpression)new NotExpression(arg);
			
              CUP$result = new java_cup.runtime.Symbol(12/*operatorExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // callExp ::= IDENTIFIER LBRACKET expList RBRACKET 
            {
              CallExpression RESULT = null;
		int procleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		TokenValue proc = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		ExpressionList list = (ExpressionList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{callExp ::= IDENTIFIER LBRACKET expList RBRACKET}");}
				RESULT = new CallExpression(proc.identifierValue, list);
			
              CUP$result = new java_cup.runtime.Symbol(11/*callExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cellExp ::= CELL LPAREN expression RPAREN 
            {
              CellExpression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{cellExp ::= CELL LPAREN expression RPAREN}");}
				RESULT = new CellExpression(exp);
			
              CUP$result = new java_cup.runtime.Symbol(10/*cellExp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= LBRACE expression RBRACE 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= LBRACE expression RBRACE}");}
				RESULT = (Expression)exp;
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= operatorExp 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		OperatorExpression exp = (OperatorExpression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= operatorExp}");}
				RESULT = (Expression)exp;
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= callExp 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CallExpression exp = (CallExpression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= callExp}");}
				RESULT = (Expression)exp;
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= cellExp 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CellExpression exp = (CellExpression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= cellExp}");}
				RESULT = (Expression)exp;
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		TokenValue token = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= IDENTIFIER}");}
				RESULT = (Expression)new VariableExpression(token.identifierValue);
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= NO 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		TokenValue token = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= NO}");}
				RESULT = (Expression)new ConstantExpression(new Value(token.boolValue));
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= YES 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		TokenValue token = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= YES}");}
				RESULT = (Expression)new ConstantExpression(new Value(token.boolValue));
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= CONSTANT 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		TokenValue token = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expression ::= CONSTANT}");}
				RESULT = (Expression)new ConstantExpression(new Value(token.numberValue));
			
              CUP$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statementList ::= statement 
            {
              StatementList RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statementList ::= statement}");}
				RESULT = new StatementList(stmt, null);
			
              CUP$result = new java_cup.runtime.Symbol(7/*statementList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statementList ::= statementList statement 
            {
              StatementList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		StatementList list = (StatementList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{statementList ::= statement statementList}");}
				
				list.Append(stmt);
				RESULT = list;
			
              CUP$result = new java_cup.runtime.Symbol(7/*statementList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifierList ::= nonempty_identifierList 
            {
              IdentifierList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		IdentifierList list = (IdentifierList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{identifierList ::= nonempty_identifierList}");}
				RESULT = list;
			
              CUP$result = new java_cup.runtime.Symbol(6/*identifierList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifierList ::= 
            {
              IdentifierList RESULT = null;
		
				if(BlooPTerminal.debug) {System.out.println("{identifierList ::= }");}
				RESULT = null;
			
              CUP$result = new java_cup.runtime.Symbol(6/*identifierList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nonempty_identifierList ::= IDENTIFIER 
            {
              IdentifierList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{nonempty_identifierList ::= IDENTIFIER}");}
				RESULT = new IdentifierList(id.identifierValue, null);
			
              CUP$result = new java_cup.runtime.Symbol(5/*nonempty_identifierList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nonempty_identifierList ::= IDENTIFIER COMMA nonempty_identifierList 
            {
              IdentifierList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		IdentifierList list = (IdentifierList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{nonempty_identifierList ::= IDENTIFIER COMMA nonempty_identifierList}");}
				RESULT = new IdentifierList(id.identifierValue, list);
			
              CUP$result = new java_cup.runtime.Symbol(5/*nonempty_identifierList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expList ::= nonempty_expList 
            {
              ExpressionList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		ExpressionList list = (ExpressionList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{expList ::= nonempty_expList}");}
				RESULT = list;
			
              CUP$result = new java_cup.runtime.Symbol(4/*expList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expList ::= 
            {
              ExpressionList RESULT = null;
		
				if(BlooPTerminal.debug) {System.out.println("{expList ::= }");}
				RESULT = null;
			
              CUP$result = new java_cup.runtime.Symbol(4/*expList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nonempty_expList ::= expression 
            {
              ExpressionList RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{nonempty_expList ::= expression}");}
				RESULT = new ExpressionList(exp, null);
			
              CUP$result = new java_cup.runtime.Symbol(3/*nonempty_expList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nonempty_expList ::= expression COMMA nonempty_expList 
            {
              ExpressionList RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		ExpressionList list = (ExpressionList)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{nonempty_expList ::= expression COMMA nonempty_expList}");}
				RESULT = new ExpressionList(exp, list);
			
              CUP$result = new java_cup.runtime.Symbol(3/*nonempty_expList*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= callExp SEPARATOR 
            {
              Ast RESULT = null;
		int callleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CallExpression call = (CallExpression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{program ::= callExp}");}
				RESULT = call;
			
              CUP$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= procedureDef SEPARATOR 
            {
              Ast RESULT = null;
		int procleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		ProcedureDefinition proc = (ProcedureDefinition)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{program ::= procedureDef}");}
				RESULT = proc;
			
              CUP$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= procedureDef callExp 
            {
              Ast RESULT = null;
		int procleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		ProcedureDefinition proc = (ProcedureDefinition)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CallExpression call = (CallExpression)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{program ::= procedureDef callExp}");}
				RESULT = new Program(proc, call);
			
              CUP$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= procedureDef program 
            {
              Ast RESULT = null;
		int procleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		ProcedureDefinition proc = (ProcedureDefinition)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		Ast prog = (Ast)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				if(BlooPTerminal.debug) {System.out.println("{program ::= procedureDef program}");}
				RESULT = new Program(proc, prog);
			
              CUP$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		Ast start_val = (Ast)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

